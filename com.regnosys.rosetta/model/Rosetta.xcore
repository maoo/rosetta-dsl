@Ecore(nsURI="http://www.rosetta-model.com/Rosetta")
@GenModel(fileExtensions="rosetta", modelDirectory="/com.regnosys.rosetta/emf-gen", operationReflection="false",
	copyrightText="Copyright (c) REGnosys 2017 (www.regnosys.com)", forceOverwrite="true", updateClasspath="false",
	complianceLevel="8.0")
package com.regnosys.rosetta.rosetta

import java.util.stream.Collectors
import com.regnosys.rosetta.rosetta.simple.References
import com.regnosys.rosetta.rosetta.simple.Data
import com.regnosys.rosetta.rosetta.expression.RosettaExpression

class RosettaModel extends RosettaDefinable {
	String name
	String version = "0.0.0"
	contains Import[] imports
	contains RosettaQualifiableConfiguration[] configurations opposite model 
	contains RosettaRootElement[] elements opposite model
}

class Import {
	String importedNamespace
}

/**********************************************************************
 * Common types
 */

abstract class RosettaDefinable {
	String definition
}

abstract class RosettaNamed {
	String name
}

interface RosettaTyped {
	refers RosettaType ^type
		
	derived boolean isTypeInferred get {
		return ^type === null
	}
}

abstract class WithCardinality {
	contains RosettaCardinality card
}

class RosettaFeature extends RosettaNamed {
	/**
	 * @return The name or 'value' if it's <code>null</code>
	 */
	derived String getNameOrDefault get {
		return name ?: 'value'
	}
}

class RosettaTypedFeature extends RosettaFeature, RosettaTyped {}

abstract class RosettaCallable extends RosettaNamed {}

interface RosettaCallableWithArgs extends RosettaNamed{
}

interface RosettaRootElement {
	container RosettaModel model opposite elements
}

abstract class RosettaFeatureOwner extends RosettaDefinable {
	contains RosettaTypedFeature[] features
}

abstract class RosettaType extends RosettaRootElement, RosettaNamed {
}


/**********************************************************************
 * Built-in
 */

abstract class RosettaBuiltinType extends RosettaType {
}

class RosettaBasicType extends RosettaRootElement , RosettaBuiltinType {
}

class RosettaSynonymSource extends RosettaRootElement , RosettaNamed {
}

class RosettaRecordType extends RosettaRootElement, RosettaFeatureOwner, RosettaBuiltinType, RosettaCallableWithArgs {
}

class RosettaExternalFunction extends RosettaRootElement, RosettaTyped, RosettaCallableWithArgs, RosettaBuiltinType , RosettaDefinable {
	contains RosettaParameter[] parameters
}

class RosettaParameter extends RosettaTypedFeature {
	boolean isArray
}

class RosettaQualifiedType extends RosettaRootElement, RosettaFeatureOwner, RosettaBuiltinType, RosettaCallableWithArgs {
}

class RosettaCalculationType extends RosettaRootElement, RosettaFeatureOwner, RosettaBuiltinType, RosettaCallableWithArgs {
}


/**********************************************************************
 * Data model
 */
class RosettaMetaType extends RosettaRootElement, RosettaTypedFeature, RosettaType {
	
}

class RosettaEnumeration extends RosettaRootElement, RosettaType, RosettaDefinable, RosettaCallable, References {
	refers RosettaEnumeration superType
	contains RosettaSynonym[] synonyms
	contains RosettaEnumValue[] enumValues opposite enumeration
}

class RosettaEnumValue extends RosettaNamed, RosettaDefinable, RosettaFeature, References {
	String display
	contains RosettaEnumSynonym[] enumSynonyms
	container RosettaEnumeration enumeration opposite enumValues
	
	refers RosettaType ^type get {
		return enumeration
	}
}

class RosettaEnumValueReference extends RosettaExpression {
	refers RosettaEnumeration enumeration
	refers RosettaEnumValue value
}

class RosettaCardinality {
	int inf
	int sup
	boolean unbounded
	
	derived boolean isMany get {
		unbounded || sup > 1 || sup != 1 // ??? sup of 0 is counted as multiple
	}
	
	op String toConstraintString() {
		if (this.unbounded) {
			return "(" + this.inf + "..*)"; 
		}
		return "(" + this.inf + ".." + this.sup + ")";
	}
	op boolean constraintEquals(RosettaCardinality other) {
		if (other === null) {
			return false;
		}
		if (this.isUnbounded()) {
			return other.isUnbounded() && this.getInf() == other.getInf();
		}
		return this.getInf() == other.getInf() && this.getSup() == other.getSup();
	}
	op int constraintHashCode() {
		var int hash = 3;
		hash = 53 * hash + Boolean.hashCode(this.isUnbounded());
		hash = 53 * hash + Integer.hashCode(this.getInf());
		if (!this.isUnbounded()) {
			hash = 53 * hash + Integer.hashCode(this.getSup());
		}
		return hash;
	}
	op boolean isSubconstraintOf(RosettaCardinality superConstraint) {
		return this.getInf() >= superConstraint.getInf() &&
				(superConstraint.isUnbounded() || !this.isUnbounded() && this.getSup() <= superConstraint.getSup());
	}
	op RosettaCardinality add(RosettaCardinality other) {
		val c = RosettaFactory.eINSTANCE.createRosettaCardinality
		c.inf = inf + other.inf
		if (unbounded || other.unbounded) {
			c.unbounded = true
		} else {
			c.sup = sup + other.sup
		}
		return c
	}
	op RosettaCardinality operator_plus(RosettaCardinality other) {
		return this.add(other)
	}
	op RosettaCardinality multiply(RosettaCardinality other) {
		val c = RosettaFactory.eINSTANCE.createRosettaCardinality
		c.inf = inf * other.inf
		if ((!unbounded && sup === 0) || (!other.unbounded && other.sup === 0)) {
			c.sup = 0
		} else if (unbounded || other.unbounded) {
			c.unbounded = true
		} else {
			c.sup = sup * other.sup
		}
		return c
	}
	op RosettaCardinality operator_multiply(RosettaCardinality other) {
		return this.multiply(other)
	}
	
	derived boolean empty get {
		!unbounded && sup == 0
	}
	derived boolean optional get {
		return !unbounded && inf == 0 && sup == 1
	}
	derived boolean singular get {
		return !unbounded && inf == 1 && sup == 1
	}
	derived boolean plural get {
		return unbounded || sup > 1
	}
}


/**********************************************************************
 * Synonyms
 */

abstract class RosettaSynonymBase {

	refers RosettaSynonymSource[] sources
}

class RosettaSynonymValueBase {
	String name
	RosettaSynonymRef refType
	int value
	String path
	int maps
}

class RosettaClassSynonym extends RosettaSynonymBase {
	contains RosettaSynonymValueBase value
	contains RosettaSynonymValueBase metaValue
}

class RosettaSynonym extends RosettaSynonymBase {
	contains RosettaSynonymBody body
}

class RosettaSynonymBody extends RosettaSynonymBase {
	contains RosettaSynonymValueBase[] values
	contains RosettaMapping mappingLogic
	String[] hints
	contains RosettaMergeSynonymValue merge
	String[] metaValues
	String mapper
	String format
	String patternMatch
	String patternReplace
	boolean removeHtml
}

class RosettaMergeSynonymValue {
	String name
	String excludePath
}

class RosettaEnumSynonym extends RosettaSynonymBase, RosettaDefinable {
	String synonymValue
	String patternMatch
	String patternReplace
	boolean removeHtml
}

enum RosettaSynonymRef {
	tag
	componentID = 1
}


/**********************************************************************
 * docReferences
 */

class RosettaDocReference extends RosettaRegulatoryBody {
	String provision
	contains RosettaSegmentRef[] segments
	boolean reportedField
}

class RosettaSegmentRef {
	refers RosettaSegment segment
	String segmentRef
}

class RosettaRegulatoryBody {
	refers RosettaBody body
	refers RosettaCorpus[] corpuses
}

class RosettaBody extends RosettaRootElement, RosettaNamed, RosettaDefinable {
	String bodyType
}

class RosettaCorpus extends RosettaRootElement, RosettaNamed, RosettaDefinable {
	String corpusType
	String displayName
	refers RosettaBody body
}

class RosettaSegment extends RosettaRootElement, RosettaNamed {
}

/**********************************************************************
 * Mappings
 */

class RosettaMapping {
	contains RosettaMappingInstance[] instances
}

class RosettaMappingInstance {
	contains RosettaExpression ^set
	contains RosettaMappingPathTests when
	boolean ^default
}

class RosettaMappingPathTests {
	contains RosettaExpression[] tests
}

class RosettaMapPath extends RosettaExpression {
	contains RosettaExpression path
}

class RosettaMapRosettaPath extends RosettaExpression {
	contains RosettaExpression path
}

class RosettaMapPathValue extends RosettaExpression {
	String path
}

/**********************************************************************
 * Qualifiable used for RosettaProduct and RosettaEvent. Check enum RosettaQualifiableType when adding new classes
 */

class RosettaQualifiableConfiguration {
	RosettaQualifiableType qType
	refers RosettaModel model opposite configurations
	refers Data rosettaClass
	
}

enum RosettaQualifiableType {
	None, Event, Product
}

/*****************************************
 * Translate external synonym support
 *****************************************/

class RosettaExternalSynonymSource extends RosettaSynonymSource {
	contains RosettaExternalRef[] externalRefs
	refers RosettaSynonymSource superSynonym
	
	op RosettaExternalClass[] getExternalClasses() {
		externalRefs.filter(RosettaExternalClass).toEList
	}
	
	op RosettaExternalEnum[] getExternalEnums() {
		externalRefs.filter(RosettaExternalEnum).toEList
	}
}

class RosettaExternalRef {
	refers RosettaType typeRef
}

class RosettaExternalClass extends RosettaExternalRef {
	contains RosettaExternalClassSynonym[] externalClassSynonyms
	contains RosettaExternalRegularAttribute[] regularAttributes
}

class RosettaExternalEnum extends RosettaExternalRef {
	contains RosettaExternalEnumValue[] regularValues
}

class RosettaExternalRegularAttribute {
	String operator
	refers RosettaFeature attributeRef
	contains RosettaExternalSynonym[] externalSynonyms
}

class RosettaExternalEnumValue {
	String operator
	refers RosettaEnumValue enumRef
	contains RosettaEnumSynonym[] externalEnumSynonyms
}

class RosettaExternalClassSynonym extends RosettaSynonymBase {
	contains RosettaSynonymValueBase value
	contains RosettaSynonymValueBase metaValue
}

class RosettaExternalSynonym {
	contains RosettaSynonymBody body
}

/********************
* Blueprint - Should be a separate grammar
*/
 
class RosettaBlueprintReport extends RosettaRootElement {
	contains RosettaRegulatoryBody regulatoryBody
	refers Data reportType
	refers RosettaBlueprint[] eligibilityRules
	refers RosettaCorpus reportingStandard
	
	op String name() {
		(getRegulatoryBody.getBody.name.toFirstUpper 
				+ getRegulatoryBody.corpuses.stream.map[RosettaCorpus man | man.name.toFirstUpper].collect(Collectors.joining('_'))).replace(' ', '')
	}
}

class RosettaBlueprint extends RosettaRootElement, RosettaNamed, RosettaDefinable {
	contains RosettaDocReference[] references
	contains BlueprintNodeExp nodes
	refers RosettaType output
}

class BlueprintNodeExp {
	contains BlueprintNode node
	contains RosettaDocReference reference
	contains BlueprintNodeExp next 
}

abstract class BlueprintNode {
	String name
	String identifier
	refers RosettaType input
	refers RosettaType output
	refers RosettaType inputKey
	refers RosettaType outputKey
}

class BlueprintSource extends BlueprintNode{}

class BlueprintOr extends BlueprintNode {
	contains BlueprintNodeExp[] bps
}

class BlueprintRef extends BlueprintNode {
	refers RosettaBlueprint blueprint
}

class BlueprintFilter extends BlueprintNode {
	contains RosettaExpression filter
	contains BlueprintRef filterBP
}

class BlueprintExtract extends BlueprintNode {
	contains RosettaExpression call
	boolean repeatable
}

class BlueprintReturn extends BlueprintNode {
	contains RosettaExpression expression
}

class BlueprintLookup extends BlueprintNode {
}

